target C {
  files: "traffic_light.h"
};
preamble {=
  #include "traffic_light.h"


  #define ACTUATE_LIGHT(light, color) \
    if (color == STATE_RED) { \
      lf_print("### " PRINTF_TIME "s "PRINTF_TIME"ns %s: RED", lf_time_logical_elapsed()/SEC(1), lf_time_logical_elapsed() % SEC(1), #light); \
    } else if (color == STATE_GREEN) { \
      lf_print("### " PRINTF_TIME "s "PRINTF_TIME"ns %s: GREEN", lf_time_logical_elapsed()/SEC(1), lf_time_logical_elapsed() % SEC(1), #light); \
    } else { \
      lf_print_error_and_exit("Tried to acutate light with invalid value %d", color); \
    }
=}

reactor PedestrianTrafficLight {

  output request:bool
  input color: int
  input ped_request:bool

  reaction(ped_request) -> request {=
    lf_set(request, true);
  =}

  reaction(color) {=
    ACTUATE_LIGHT(Pedestrian, color->value);
  =}
}

reactor PedestrianTrafficLightInteractive {
  preamble {=
    bool run_thread = false;
    void* external(void* a) {
      printf("Press Enter to Request green, or 'x+enter' to exit \n");
      while (run_thread) {        
        char c = getchar(); // Wait for enter key press
        lf_schedule_int(a, 0, c);
        if (c == 'x') {
          break;
        }
      }
    }
  =}

  output request:bool
  input color: int

  physical action a_request: int;
  state thread_id: lf_thread_t = 0

  light = new PedestrianTrafficLight()

  light.request -> request
  color -> light.color

  reaction(startup) -> a_request {=
    // Start a thread to schedule physical actions.
    run_thread=true;
    lf_thread_create(&self->thread_id, &external, a_request);
  =}

  reaction(shutdown) {=
    run_thread=false;
    lf_thread_join(self->thread_id, NULL);
  =}

  reaction(a_request) -> light.ped_request {=
    if (a_request->value == 'x') {
      lf_print("Exiting");
      lf_request_stop();
    } else {
      lf_set(light.ped_request, true);
    }
  =}

}


reactor CarTrafficLight {
  input color: int

  reaction(color) {=
    ACTUATE_LIGHT(Car, color->value);
  =}
}

reactor SafetyMonitor {
  input ped_color: int
  input car_color: int

  reaction(ped_color, car_color) {=
    if (ped_color->value >= STATE_YELLOW && car_color->value >= STATE_YELLOW) {
      lf_print_error_and_exit("Car and Pedestrian traffic lights are both green or yellow");
    }
  =}
}

reactor TestHarness {
  input ped_color:int
  input car_color:int

  output ped_request:bool
}